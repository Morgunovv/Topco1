// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tVrjFA7RVCG7zyycB4xXud
// Component: 0GTyfIUsqBb8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseDialogTrigger } from "@plasmicpkgs/react-aria/skinny/registerDialogTrigger";
import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";
import { BaseModal } from "@plasmicpkgs/react-aria/skinny/registerModal";
import ContactUsPopup from "../../ContactUsPopup"; // plasmic-import: apyUXb51frmk/component
import { BaseDialog } from "@plasmicpkgs/react-aria/skinny/registerDialog";

import { useScreenVariants as useScreenVariantsknLyTCzNv2Gm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KNLyTCzNV2Gm/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tVrjFA7RVCG7zyycB4xXud/projectcss
import sty from "./PlasmicModalMobilePopover.module.css"; // plasmic-import: 0GTyfIUsqBb8/css

createPlasmicElementProxy;

export type PlasmicModalMobilePopover__VariantMembers = {
  noTrigger: "noTrigger";
};
export type PlasmicModalMobilePopover__VariantsArgs = {
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
};
type VariantPropType = keyof PlasmicModalMobilePopover__VariantsArgs;
export const PlasmicModalMobilePopover__VariantProps =
  new Array<VariantPropType>("noTrigger");

export type PlasmicModalMobilePopover__ArgsType = {
  isOpen?: boolean;
  closeOnBackdropClick?: boolean;
  showHeader?: boolean;
  showFooter?: boolean;
  isKeyboardDismissDisabled?: boolean;
  onOpenChange?: (val: boolean) => void;
};
type ArgPropType = keyof PlasmicModalMobilePopover__ArgsType;
export const PlasmicModalMobilePopover__ArgProps = new Array<ArgPropType>(
  "isOpen",
  "closeOnBackdropClick",
  "showHeader",
  "showFooter",
  "isKeyboardDismissDisabled",
  "onOpenChange"
);

export type PlasmicModalMobilePopover__OverridesType = {
  ariaDialogTrigger?: Flex__<typeof BaseDialogTrigger>;
  ariaButton?: Flex__<typeof BaseButton>;
  ariaModal?: Flex__<typeof BaseModal>;
  ariaDialog?: Flex__<typeof BaseDialog>;
  scrollableContent?: Flex__<"div">;
  contextMenus3?: Flex__<"div">;
  header3?: Flex__<"div">;
  controls7?: Flex__<"div">;
  icon13?: Flex__<"div">;
  icon14?: Flex__<"div">;
  controls8?: Flex__<"div">;
  icon15?: Flex__<"div">;
  icon16?: Flex__<"div">;
  controls9?: Flex__<"div">;
  icon17?: Flex__<"div">;
  icon18?: Flex__<"div">;
};

export interface DefaultModalMobilePopoverProps {
  isOpen?: boolean;
  closeOnBackdropClick?: boolean;
  showHeader?: boolean;
  showFooter?: boolean;
  isKeyboardDismissDisabled?: boolean;
  onOpenChange?: (val: boolean) => void;
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicModalMobilePopover__RenderFunc(props: {
  variants: PlasmicModalMobilePopover__VariantsArgs;
  args: PlasmicModalMobilePopover__ArgsType;
  overrides: PlasmicModalMobilePopover__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          closeOnBackdropClick: true,
          showHeader: false,
          showFooter: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ariaDialogTrigger.isOpen",
        type: "writable",
        variableType: "boolean",

        valueProp: "isOpen",
        onChangeProp: "onOpenChange"
      },
      {
        path: "ariaModal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true,

        refName: "ariaModal"
      },
      {
        path: "noTrigger",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noTrigger
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsknLyTCzNv2Gm()
  });

  return (
    <BaseDialogTrigger
      data-plasmic-name={"ariaDialogTrigger"}
      data-plasmic-override={overrides.ariaDialogTrigger}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.ariaDialogTrigger,
        {
          [sty.ariaDialogTriggernoTrigger]: hasVariant(
            $state,
            "noTrigger",
            "noTrigger"
          )
        }
      )}
      dialog={
        <BaseModal
          data-plasmic-name={"ariaModal"}
          data-plasmic-override={overrides.ariaModal}
          className={classNames("__wab_instance", sty.ariaModal, {
            [sty.ariaModalnoTrigger]: hasVariant(
              $state,
              "noTrigger",
              "noTrigger"
            )
          })}
          defaultOpen={true}
          isDismissable={args.closeOnBackdropClick}
          isKeyboardDismissDisabled={args.isKeyboardDismissDisabled}
          isOpen={generateStateValueProp($state, ["ariaModal", "isOpen"])}
          modalOverlayClass={classNames({ [sty["pcls_ywOnq2JuVxuN"]]: true })}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["ariaModal", "isOpen"]).apply(
              null,
              eventArgs
            );
          }}
          ref={ref => {
            $refs["ariaModal"] = ref;
          }}
          resetClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens
          )}
        >
          <ContactUsPopup
            className={classNames("__wab_instance", sty.contactUsPopup__hJky)}
          />

          <BaseDialog
            data-plasmic-name={"ariaDialog"}
            data-plasmic-override={overrides.ariaDialog}
            className={classNames("__wab_instance", sty.ariaDialog, {
              [sty.ariaDialognoTrigger]: hasVariant(
                $state,
                "noTrigger",
                "noTrigger"
              )
            })}
          >
            <div
              data-plasmic-name={"scrollableContent"}
              data-plasmic-override={overrides.scrollableContent}
              className={classNames(projectcss.all, sty.scrollableContent)}
            >
              <ContactUsPopup
                className={classNames(
                  "__wab_instance",
                  sty.contactUsPopup__dzi6F,
                  {
                    [sty.contactUsPopupnoTrigger__dzi6FISjsk]: hasVariant(
                      $state,
                      "noTrigger",
                      "noTrigger"
                    )
                  }
                )}
              />
            </div>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <div
                data-plasmic-name={"contextMenus3"}
                data-plasmic-override={overrides.contextMenus3}
                className={classNames(projectcss.all, sty.contextMenus3)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"header3"}
                    data-plasmic-override={overrides.header3}
                    className={classNames(projectcss.all, sty.header3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aHmF
                      )}
                    >
                      {"Header"}
                    </div>
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  data-plasmic-name={"controls7"}
                  data-plasmic-override={overrides.controls7}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.controls7)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ldifm
                    )}
                  >
                    {"Builders Toolkit"}
                  </div>
                  <div
                    data-plasmic-name={"icon13"}
                    data-plasmic-override={overrides.icon13}
                    className={classNames(projectcss.all, sty.icon13)}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"icon14"}
                        data-plasmic-override={overrides.icon14}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.icon14
                        )}
                      >
                        {"\udbc3\udfeb"}
                      </div>
                    ) : null}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"controls8"}
                  data-plasmic-override={overrides.controls8}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.controls8)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gpAkr
                    )}
                  >
                    {"Companies"}
                  </div>
                  <div
                    data-plasmic-name={"icon15"}
                    data-plasmic-override={overrides.icon15}
                    className={classNames(projectcss.all, sty.icon15)}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"icon16"}
                        data-plasmic-override={overrides.icon16}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.icon16
                        )}
                      >
                        {"\udbc3\udfeb"}
                      </div>
                    ) : null}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"controls9"}
                  data-plasmic-override={overrides.controls9}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.controls9)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8WrlR
                    )}
                  >
                    {"Portfolio"}
                  </div>
                  <div
                    data-plasmic-name={"icon17"}
                    data-plasmic-override={overrides.icon17}
                    className={classNames(projectcss.all, sty.icon17)}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"icon18"}
                        data-plasmic-override={overrides.icon18}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.icon18
                        )}
                      >
                        {"\udbc3\udfeb"}
                      </div>
                    ) : null}
                  </div>
                </Stack__>
              </div>
            ) : null}
          </BaseDialog>
        </BaseModal>
      }
      isOpen={generateStateValueProp($state, ["ariaDialogTrigger", "isOpen"])}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, [
          "ariaDialogTrigger",
          "isOpen"
        ]).apply(null, eventArgs);
      }}
      trigger={
        <BaseButton
          data-plasmic-name={"ariaButton"}
          data-plasmic-override={overrides.ariaButton}
          className={classNames("__wab_instance", sty.ariaButton, {
            [sty.ariaButtonnoTrigger]: hasVariant(
              $state,
              "noTrigger",
              "noTrigger"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nkVhK,
              {
                [sty.textnoTrigger__nkVhKiSjsk]: hasVariant(
                  $state,
                  "noTrigger",
                  "noTrigger"
                )
              }
            )}
          >
            {hasVariant($state, "noTrigger", "noTrigger")
              ? "Contact Us"
              : "Open Dialog"}
          </div>
        </BaseButton>
      }
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ariaDialogTrigger: [
    "ariaDialogTrigger",
    "ariaButton",
    "ariaModal",
    "ariaDialog",
    "scrollableContent",
    "contextMenus3",
    "header3",
    "controls7",
    "icon13",
    "icon14",
    "controls8",
    "icon15",
    "icon16",
    "controls9",
    "icon17",
    "icon18"
  ],
  ariaButton: ["ariaButton"],
  ariaModal: [
    "ariaModal",
    "ariaDialog",
    "scrollableContent",
    "contextMenus3",
    "header3",
    "controls7",
    "icon13",
    "icon14",
    "controls8",
    "icon15",
    "icon16",
    "controls9",
    "icon17",
    "icon18"
  ],
  ariaDialog: [
    "ariaDialog",
    "scrollableContent",
    "contextMenus3",
    "header3",
    "controls7",
    "icon13",
    "icon14",
    "controls8",
    "icon15",
    "icon16",
    "controls9",
    "icon17",
    "icon18"
  ],
  scrollableContent: ["scrollableContent"],
  contextMenus3: [
    "contextMenus3",
    "header3",
    "controls7",
    "icon13",
    "icon14",
    "controls8",
    "icon15",
    "icon16",
    "controls9",
    "icon17",
    "icon18"
  ],
  header3: ["header3"],
  controls7: ["controls7", "icon13", "icon14"],
  icon13: ["icon13", "icon14"],
  icon14: ["icon14"],
  controls8: ["controls8", "icon15", "icon16"],
  icon15: ["icon15", "icon16"],
  icon16: ["icon16"],
  controls9: ["controls9", "icon17", "icon18"],
  icon17: ["icon17", "icon18"],
  icon18: ["icon18"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ariaDialogTrigger: typeof BaseDialogTrigger;
  ariaButton: typeof BaseButton;
  ariaModal: typeof BaseModal;
  ariaDialog: typeof BaseDialog;
  scrollableContent: "div";
  contextMenus3: "div";
  header3: "div";
  controls7: "div";
  icon13: "div";
  icon14: "div";
  controls8: "div";
  icon15: "div";
  icon16: "div";
  controls9: "div";
  icon17: "div";
  icon18: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicModalMobilePopover__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicModalMobilePopover__VariantsArgs;
    args?: PlasmicModalMobilePopover__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicModalMobilePopover__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicModalMobilePopover__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicModalMobilePopover__ArgProps,
          internalVariantPropNames: PlasmicModalMobilePopover__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicModalMobilePopover__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ariaDialogTrigger") {
    func.displayName = "PlasmicModalMobilePopover";
  } else {
    func.displayName = `PlasmicModalMobilePopover.${nodeName}`;
  }
  return func;
}

export const PlasmicModalMobilePopover = Object.assign(
  // Top-level PlasmicModalMobilePopover renders the root element
  makeNodeComponent("ariaDialogTrigger"),
  {
    // Helper components rendering sub-elements
    ariaButton: makeNodeComponent("ariaButton"),
    ariaModal: makeNodeComponent("ariaModal"),
    ariaDialog: makeNodeComponent("ariaDialog"),
    scrollableContent: makeNodeComponent("scrollableContent"),
    contextMenus3: makeNodeComponent("contextMenus3"),
    header3: makeNodeComponent("header3"),
    controls7: makeNodeComponent("controls7"),
    icon13: makeNodeComponent("icon13"),
    icon14: makeNodeComponent("icon14"),
    controls8: makeNodeComponent("controls8"),
    icon15: makeNodeComponent("icon15"),
    icon16: makeNodeComponent("icon16"),
    controls9: makeNodeComponent("controls9"),
    icon17: makeNodeComponent("icon17"),
    icon18: makeNodeComponent("icon18"),

    // Metadata about props expected for PlasmicModalMobilePopover
    internalVariantProps: PlasmicModalMobilePopover__VariantProps,
    internalArgProps: PlasmicModalMobilePopover__ArgProps
  }
);

export default PlasmicModalMobilePopover;
/* prettier-ignore-end */
