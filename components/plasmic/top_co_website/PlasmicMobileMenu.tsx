// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tVrjFA7RVCG7zyycB4xXud
// Component: Wg9QJsiBjK-d

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantsknLyTCzNv2Gm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KNLyTCzNV2Gm/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tVrjFA7RVCG7zyycB4xXud/projectcss
import sty from "./PlasmicMobileMenu.module.css"; // plasmic-import: Wg9QJsiBjK-d/css

import Frame2131327153Icon from "./icons/PlasmicIcon__Frame2131327153"; // plasmic-import: i9h3lVHw5uRy/icon
import Cross20Icon from "./icons/PlasmicIcon__Cross20"; // plasmic-import: 28c3JiKFdBbF/icon
import Chevron243Icon from "./icons/PlasmicIcon__Chevron243"; // plasmic-import: 8aTfnpHQ1sUB/icon

createPlasmicElementProxy;

export type PlasmicMobileMenu__VariantMembers = {};
export type PlasmicMobileMenu__VariantsArgs = {};
type VariantPropType = keyof PlasmicMobileMenu__VariantsArgs;
export const PlasmicMobileMenu__VariantProps = new Array<VariantPropType>();

export type PlasmicMobileMenu__ArgsType = {};
type ArgPropType = keyof PlasmicMobileMenu__ArgsType;
export const PlasmicMobileMenu__ArgProps = new Array<ArgPropType>();

export type PlasmicMobileMenu__OverridesType = {
  menuButton?: Flex__<"button">;
  frame2131327145?: Flex__<"div">;
  frame2131327146?: Flex__<"div">;
  frame2131327275?: Flex__<"div">;
  contextMenus?: Flex__<"div">;
  controls2?: Flex__<"div">;
  icon3?: Flex__<"div">;
  controls6?: Flex__<"div">;
  icon4?: Flex__<"div">;
  controls3?: Flex__<"div">;
  icon5?: Flex__<"div">;
  controls4?: Flex__<"div">;
  icon7?: Flex__<"div">;
  controls5?: Flex__<"div">;
  icon9?: Flex__<"div">;
};

export interface DefaultMobileMenuProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMobileMenu__RenderFunc(props: {
  variants: PlasmicMobileMenu__VariantsArgs;
  args: PlasmicMobileMenu__ArgsType;
  overrides: PlasmicMobileMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "mobMenu",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isMenuButtonHover, triggerMenuButtonHoverProps] = useTrigger(
    "useHover",
    {}
  );
  const [isMenuButtonActive, triggerMenuButtonActiveProps] = useTrigger(
    "usePressed",
    {}
  );
  const triggers = {
    hoverActive_menuButton: isMenuButtonHover && isMenuButtonActive
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsknLyTCzNv2Gm()
  });

  return (
    <button
      data-plasmic-name={"menuButton"}
      data-plasmic-override={overrides.menuButton}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.menuButton
      )}
      ref={ref => {
        $refs["menuButton"] = ref;
      }}
      data-plasmic-trigger-props={[
        triggerMenuButtonHoverProps,
        triggerMenuButtonActiveProps
      ]}
    >
      <div
        data-plasmic-name={"frame2131327145"}
        data-plasmic-override={overrides.frame2131327145}
        className={classNames(projectcss.all, sty.frame2131327145)}
      >
        <Stack__
          as={Frame2131327153Icon}
          hasGap={true}
          className={classNames(projectcss.all, sty.svg___3Svtc)}
          role={"img"}
        />

        <div
          data-plasmic-name={"frame2131327146"}
          data-plasmic-override={overrides.frame2131327146}
          className={classNames(projectcss.all, sty.frame2131327146)}
        >
          <Stack__
            as={Frame2131327153Icon}
            hasGap={true}
            className={classNames(projectcss.all, sty.svg__i0LIs)}
            role={"img"}
          />

          {(triggers.hoverActive_menuButton ? true : false) ? (
            <Cross20Icon
              className={classNames(projectcss.all, sty.svg__b2Hl)}
              role={"img"}
            />
          ) : null}
        </div>
      </div>
      <div
        data-plasmic-name={"frame2131327275"}
        data-plasmic-override={overrides.frame2131327275}
        className={classNames(projectcss.all, sty.frame2131327275)}
      >
        <div
          data-plasmic-name={"contextMenus"}
          data-plasmic-override={overrides.contextMenus}
          className={classNames(projectcss.all, sty.contextMenus)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"controls2"}
            data-plasmic-override={overrides.controls2}
            hasGap={true}
            className={classNames(projectcss.all, sty.controls2)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__m3F77
              )}
            >
              {"Build With Us"}
            </div>
            <div
              data-plasmic-name={"icon3"}
              data-plasmic-override={overrides.icon3}
              className={classNames(projectcss.all, sty.icon3)}
            >
              <Chevron243Icon
                className={classNames(projectcss.all, sty.svg__cqj7G)}
                role={"img"}
              />
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"controls6"}
            data-plasmic-override={overrides.controls6}
            hasGap={true}
            className={classNames(projectcss.all, sty.controls6)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dcInF
              )}
            >
              {"Investments"}
            </div>
            <div
              data-plasmic-name={"icon4"}
              data-plasmic-override={overrides.icon4}
              className={classNames(projectcss.all, sty.icon4)}
            />
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"controls3"}
            data-plasmic-override={overrides.controls3}
            hasGap={true}
            className={classNames(projectcss.all, sty.controls3)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__a6ZK2
              )}
            >
              {"Insights"}
            </div>
            <div
              data-plasmic-name={"icon5"}
              data-plasmic-override={overrides.icon5}
              className={classNames(projectcss.all, sty.icon5)}
            />
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"controls4"}
            data-plasmic-override={overrides.controls4}
            hasGap={true}
            className={classNames(projectcss.all, sty.controls4)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__enKcp
              )}
            >
              {"About TOP"}
            </div>
            <div
              data-plasmic-name={"icon7"}
              data-plasmic-override={overrides.icon7}
              className={classNames(projectcss.all, sty.icon7)}
            />
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"controls5"}
            data-plasmic-override={overrides.controls5}
            hasGap={true}
            className={classNames(projectcss.all, sty.controls5)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wPPz
              )}
            >
              {"Carrers"}
            </div>
            <div
              data-plasmic-name={"icon9"}
              data-plasmic-override={overrides.icon9}
              className={classNames(projectcss.all, sty.icon9)}
            />
          </Stack__>
        </div>
      </div>
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  menuButton: [
    "menuButton",
    "frame2131327145",
    "frame2131327146",
    "frame2131327275",
    "contextMenus",
    "controls2",
    "icon3",
    "controls6",
    "icon4",
    "controls3",
    "icon5",
    "controls4",
    "icon7",
    "controls5",
    "icon9"
  ],
  frame2131327145: ["frame2131327145", "frame2131327146"],
  frame2131327146: ["frame2131327146"],
  frame2131327275: [
    "frame2131327275",
    "contextMenus",
    "controls2",
    "icon3",
    "controls6",
    "icon4",
    "controls3",
    "icon5",
    "controls4",
    "icon7",
    "controls5",
    "icon9"
  ],
  contextMenus: [
    "contextMenus",
    "controls2",
    "icon3",
    "controls6",
    "icon4",
    "controls3",
    "icon5",
    "controls4",
    "icon7",
    "controls5",
    "icon9"
  ],
  controls2: ["controls2", "icon3"],
  icon3: ["icon3"],
  controls6: ["controls6", "icon4"],
  icon4: ["icon4"],
  controls3: ["controls3", "icon5"],
  icon5: ["icon5"],
  controls4: ["controls4", "icon7"],
  icon7: ["icon7"],
  controls5: ["controls5", "icon9"],
  icon9: ["icon9"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  menuButton: "button";
  frame2131327145: "div";
  frame2131327146: "div";
  frame2131327275: "div";
  contextMenus: "div";
  controls2: "div";
  icon3: "div";
  controls6: "div";
  icon4: "div";
  controls3: "div";
  icon5: "div";
  controls4: "div";
  icon7: "div";
  controls5: "div";
  icon9: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMobileMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMobileMenu__VariantsArgs;
    args?: PlasmicMobileMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMobileMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMobileMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMobileMenu__ArgProps,
          internalVariantPropNames: PlasmicMobileMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMobileMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "menuButton") {
    func.displayName = "PlasmicMobileMenu";
  } else {
    func.displayName = `PlasmicMobileMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicMobileMenu = Object.assign(
  // Top-level PlasmicMobileMenu renders the root element
  makeNodeComponent("menuButton"),
  {
    // Helper components rendering sub-elements
    frame2131327145: makeNodeComponent("frame2131327145"),
    frame2131327146: makeNodeComponent("frame2131327146"),
    frame2131327275: makeNodeComponent("frame2131327275"),
    contextMenus: makeNodeComponent("contextMenus"),
    controls2: makeNodeComponent("controls2"),
    icon3: makeNodeComponent("icon3"),
    controls6: makeNodeComponent("controls6"),
    icon4: makeNodeComponent("icon4"),
    controls3: makeNodeComponent("controls3"),
    icon5: makeNodeComponent("icon5"),
    controls4: makeNodeComponent("controls4"),
    icon7: makeNodeComponent("icon7"),
    controls5: makeNodeComponent("controls5"),
    icon9: makeNodeComponent("icon9"),

    // Metadata about props expected for PlasmicMobileMenu
    internalVariantProps: PlasmicMobileMenu__VariantProps,
    internalArgProps: PlasmicMobileMenu__ArgProps
  }
);

export default PlasmicMobileMenu;
/* prettier-ignore-end */
