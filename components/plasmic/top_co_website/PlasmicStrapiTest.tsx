// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tVrjFA7RVCG7zyycB4xXud
// Component: gTE7u0pfuhzH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tVrjFA7RVCG7zyycB4xXud/projectcss
import sty from "./PlasmicStrapiTest.module.css"; // plasmic-import: gTE7u0pfuhzH/css

import Logo150X150Icon from "./icons/PlasmicIcon__Logo150X150"; // plasmic-import: gk4acOlggq0z/icon

createPlasmicElementProxy;

export type PlasmicStrapiTest__VariantMembers = {};
export type PlasmicStrapiTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicStrapiTest__VariantsArgs;
export const PlasmicStrapiTest__VariantProps = new Array<VariantPropType>();

export type PlasmicStrapiTest__ArgsType = {};
type ArgPropType = keyof PlasmicStrapiTest__ArgsType;
export const PlasmicStrapiTest__ArgProps = new Array<ArgPropType>();

export type PlasmicStrapiTest__OverridesType = {
  root?: Flex__<"div">;
  card?: Flex__<"div">;
  content?: Flex__<"div">;
  stonFi80?: Flex__<"div">;
  svg?: Flex__<"svg">;
  titleSubtitle2?: Flex__<"div">;
  headline?: Flex__<"div">;
  theresSomeKindOfSubtitle?: Flex__<"div">;
};

export interface DefaultStrapiTestProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStrapiTest__RenderFunc(props: {
  variants: PlasmicStrapiTest__VariantsArgs;
  args: PlasmicStrapiTest__ArgsType;
  overrides: PlasmicStrapiTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"card"}
        data-plasmic-override={overrides.card}
        hasGap={true}
        className={classNames(projectcss.all, sty.card)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          hasGap={true}
          className={classNames(projectcss.all, sty.content)}
        >
          <div
            data-plasmic-name={"stonFi80"}
            data-plasmic-override={overrides.stonFi80}
            className={classNames(projectcss.all, sty.stonFi80)}
          >
            <Logo150X150Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"titleSubtitle2"}
            data-plasmic-override={overrides.titleSubtitle2}
            hasGap={true}
            className={classNames(projectcss.all, sty.titleSubtitle2)}
          >
            <div
              data-plasmic-name={"headline"}
              data-plasmic-override={overrides.headline}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.headline
              )}
            >
              {"STON.fi Trading SDK"}
            </div>
            <div
              data-plasmic-name={"theresSomeKindOfSubtitle"}
              data-plasmic-override={overrides.theresSomeKindOfSubtitle}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.theresSomeKindOfSubtitle
              )}
            >
              {"Implement crypto trading in just 1 week\n"}
            </div>
          </Stack__>
        </Stack__>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "card",
    "content",
    "stonFi80",
    "svg",
    "titleSubtitle2",
    "headline",
    "theresSomeKindOfSubtitle"
  ],
  card: [
    "card",
    "content",
    "stonFi80",
    "svg",
    "titleSubtitle2",
    "headline",
    "theresSomeKindOfSubtitle"
  ],
  content: [
    "content",
    "stonFi80",
    "svg",
    "titleSubtitle2",
    "headline",
    "theresSomeKindOfSubtitle"
  ],
  stonFi80: ["stonFi80", "svg"],
  svg: ["svg"],
  titleSubtitle2: ["titleSubtitle2", "headline", "theresSomeKindOfSubtitle"],
  headline: ["headline"],
  theresSomeKindOfSubtitle: ["theresSomeKindOfSubtitle"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  card: "div";
  content: "div";
  stonFi80: "div";
  svg: "svg";
  titleSubtitle2: "div";
  headline: "div";
  theresSomeKindOfSubtitle: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStrapiTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStrapiTest__VariantsArgs;
    args?: PlasmicStrapiTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStrapiTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStrapiTest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStrapiTest__ArgProps,
          internalVariantPropNames: PlasmicStrapiTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStrapiTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStrapiTest";
  } else {
    func.displayName = `PlasmicStrapiTest.${nodeName}`;
  }
  return func;
}

export const PlasmicStrapiTest = Object.assign(
  // Top-level PlasmicStrapiTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    card: makeNodeComponent("card"),
    content: makeNodeComponent("content"),
    stonFi80: makeNodeComponent("stonFi80"),
    svg: makeNodeComponent("svg"),
    titleSubtitle2: makeNodeComponent("titleSubtitle2"),
    headline: makeNodeComponent("headline"),
    theresSomeKindOfSubtitle: makeNodeComponent("theresSomeKindOfSubtitle"),

    // Metadata about props expected for PlasmicStrapiTest
    internalVariantProps: PlasmicStrapiTest__VariantProps,
    internalArgProps: PlasmicStrapiTest__ArgProps
  }
);

export default PlasmicStrapiTest;
/* prettier-ignore-end */
