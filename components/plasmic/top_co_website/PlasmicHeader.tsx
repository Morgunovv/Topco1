// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tVrjFA7RVCG7zyycB4xXud
// Component: 9nAwrax2T-Wy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import BuildWithUs from "../../BuildWithUs"; // plasmic-import: IHGcM1N4E6Ud/component
import ContactUsButton from "../../ContactUsButton"; // plasmic-import: RtBKwP03e9N1/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsknLyTCzNv2Gm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: KNLyTCzNV2Gm/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tVrjFA7RVCG7zyycB4xXud/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: 9nAwrax2T-Wy/css

import WhiteSymbolIcon from "./icons/PlasmicIcon__WhiteSymbol"; // plasmic-import: o42r5gsZOuat/icon
import TopIcon from "./icons/PlasmicIcon__Top"; // plasmic-import: 8GpoSJw8S8kx/icon
import Contact24Icon from "./icons/PlasmicIcon__Contact24"; // plasmic-import: 4_F0VNY3gp1U/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: _0LPyGJ07UD3/icon

createPlasmicElementProxy;

export type PlasmicHeader__VariantMembers = {};
export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicHeader__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  logoWhite?: Flex__<"div">;
  buttons?: Flex__<"div">;
  buildWithUs?: Flex__<typeof BuildWithUs>;
  button2?: Flex__<"div">;
  iconFrame2?: Flex__<"div">;
  label2?: Flex__<"div">;
  arrow24?: Flex__<"div">;
  icon24Grid?: Flex__<"div">;
  icons24IconGridSquare?: Flex__<"div">;
  button3?: Flex__<"div">;
  iconFrame3?: Flex__<"div">;
  label3?: Flex__<"div">;
  arrow242?: Flex__<"div">;
  icon24Grid2?: Flex__<"div">;
  icons24IconGridSquare2?: Flex__<"div">;
  button4?: Flex__<"div">;
  iconFrame4?: Flex__<"div">;
  label4?: Flex__<"div">;
  arrow243?: Flex__<"div">;
  icon24Grid3?: Flex__<"div">;
  icons24IconGridSquare3?: Flex__<"div">;
  button5?: Flex__<"div">;
  iconFrame5?: Flex__<"div">;
  label5?: Flex__<"div">;
  arrow244?: Flex__<"div">;
  icon24Grid4?: Flex__<"div">;
  icons24IconGridSquare4?: Flex__<"div">;
  contactUsButton?: Flex__<typeof ContactUsButton>;
  frame2131327275?: Flex__<"div">;
  contextMenus?: Flex__<"div">;
  header2?: Flex__<"div">;
  controls?: Flex__<"div">;
  icon?: Flex__<"div">;
  icon2?: Flex__<"div">;
  controls2?: Flex__<"div">;
  icon3?: Flex__<"div">;
  icon4?: Flex__<"div">;
  controls3?: Flex__<"div">;
  icon5?: Flex__<"div">;
  icon6?: Flex__<"div">;
};

export interface DefaultHeaderProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsknLyTCzNv2Gm()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        hasGap={true}
        className={classNames(projectcss.all, sty.header)}
      >
        <div
          data-plasmic-name={"logoWhite"}
          data-plasmic-override={overrides.logoWhite}
          className={classNames(projectcss.all, sty.logoWhite)}
        >
          <WhiteSymbolIcon
            className={classNames(projectcss.all, sty.svg__r3IgJ)}
            role={"img"}
          />

          <TopIcon
            className={classNames(projectcss.all, sty.svg__sM7Hb)}
            role={"img"}
          />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"buttons"}
          data-plasmic-override={overrides.buttons}
          hasGap={true}
          className={classNames(projectcss.all, sty.buttons)}
        >
          <BuildWithUs
            data-plasmic-name={"buildWithUs"}
            data-plasmic-override={overrides.buildWithUs}
            className={classNames("__wab_instance", sty.buildWithUs)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"button2"}
            data-plasmic-override={overrides.button2}
            hasGap={true}
            className={classNames(projectcss.all, sty.button2)}
          >
            {false ? (
              <div
                data-plasmic-name={"iconFrame2"}
                data-plasmic-override={overrides.iconFrame2}
                className={classNames(projectcss.all, sty.iconFrame2)}
              >
                <Contact24Icon
                  className={classNames(projectcss.all, sty.svg___4FBh4)}
                  role={"img"}
                />
              </div>
            ) : null}
            <div
              data-plasmic-name={"label2"}
              data-plasmic-override={overrides.label2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.label2
              )}
            >
              {"Investments"}
            </div>
            {false ? (
              <div
                data-plasmic-name={"arrow24"}
                data-plasmic-override={overrides.arrow24}
                className={classNames(projectcss.all, sty.arrow24)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"icon24Grid"}
                    data-plasmic-override={overrides.icon24Grid}
                    className={classNames(projectcss.all, sty.icon24Grid)}
                  >
                    <div
                      data-plasmic-name={"icons24IconGridSquare"}
                      data-plasmic-override={overrides.icons24IconGridSquare}
                      className={classNames(
                        projectcss.all,
                        sty.icons24IconGridSquare
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img___4CFri)}
                        displayHeight={"20.571428298950195px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20.571428298950195px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/top_co_website/images/square.svg",
                          fullWidth: 20.571428298950195,
                          fullHeight: 20.571428298950195,
                          aspectRatio: 1
                        }}
                      />
                    </div>
                  </div>
                ) : null}
                <Icon2Icon
                  className={classNames(projectcss.all, sty.svg__i2Gb)}
                  role={"img"}
                />
              </div>
            ) : null}
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"button3"}
            data-plasmic-override={overrides.button3}
            hasGap={true}
            className={classNames(projectcss.all, sty.button3)}
          >
            {false ? (
              <div
                data-plasmic-name={"iconFrame3"}
                data-plasmic-override={overrides.iconFrame3}
                className={classNames(projectcss.all, sty.iconFrame3)}
              >
                <Contact24Icon
                  className={classNames(projectcss.all, sty.svg__e30Ub)}
                  role={"img"}
                />
              </div>
            ) : null}
            <div
              data-plasmic-name={"label3"}
              data-plasmic-override={overrides.label3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.label3
              )}
            >
              {"Insights"}
            </div>
            {false ? (
              <div
                data-plasmic-name={"arrow242"}
                data-plasmic-override={overrides.arrow242}
                className={classNames(projectcss.all, sty.arrow242)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"icon24Grid2"}
                    data-plasmic-override={overrides.icon24Grid2}
                    className={classNames(projectcss.all, sty.icon24Grid2)}
                  >
                    <div
                      data-plasmic-name={"icons24IconGridSquare2"}
                      data-plasmic-override={overrides.icons24IconGridSquare2}
                      className={classNames(
                        projectcss.all,
                        sty.icons24IconGridSquare2
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__dlMh1)}
                        displayHeight={"20.571428298950195px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20.571428298950195px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/top_co_website/images/square.svg",
                          fullWidth: 20.571428298950195,
                          fullHeight: 20.571428298950195,
                          aspectRatio: 1
                        }}
                      />
                    </div>
                  </div>
                ) : null}
                <Icon2Icon
                  className={classNames(projectcss.all, sty.svg___2QgzQ)}
                  role={"img"}
                />
              </div>
            ) : null}
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"button4"}
            data-plasmic-override={overrides.button4}
            hasGap={true}
            className={classNames(projectcss.all, sty.button4)}
          >
            {false ? (
              <div
                data-plasmic-name={"iconFrame4"}
                data-plasmic-override={overrides.iconFrame4}
                className={classNames(projectcss.all, sty.iconFrame4)}
              >
                <Contact24Icon
                  className={classNames(projectcss.all, sty.svg__jh4EY)}
                  role={"img"}
                />
              </div>
            ) : null}
            <div
              data-plasmic-name={"label4"}
              data-plasmic-override={overrides.label4}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.label4
              )}
            >
              {"About TOP"}
            </div>
            {false ? (
              <div
                data-plasmic-name={"arrow243"}
                data-plasmic-override={overrides.arrow243}
                className={classNames(projectcss.all, sty.arrow243)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"icon24Grid3"}
                    data-plasmic-override={overrides.icon24Grid3}
                    className={classNames(projectcss.all, sty.icon24Grid3)}
                  >
                    <div
                      data-plasmic-name={"icons24IconGridSquare3"}
                      data-plasmic-override={overrides.icons24IconGridSquare3}
                      className={classNames(
                        projectcss.all,
                        sty.icons24IconGridSquare3
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__gvtm)}
                        displayHeight={"20.571428298950195px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20.571428298950195px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/top_co_website/images/square.svg",
                          fullWidth: 20.571428298950195,
                          fullHeight: 20.571428298950195,
                          aspectRatio: 1
                        }}
                      />
                    </div>
                  </div>
                ) : null}
                <Icon2Icon
                  className={classNames(projectcss.all, sty.svg__auSo8)}
                  role={"img"}
                />
              </div>
            ) : null}
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"button5"}
            data-plasmic-override={overrides.button5}
            hasGap={true}
            className={classNames(projectcss.all, sty.button5)}
          >
            {false ? (
              <div
                data-plasmic-name={"iconFrame5"}
                data-plasmic-override={overrides.iconFrame5}
                className={classNames(projectcss.all, sty.iconFrame5)}
              >
                <Contact24Icon
                  className={classNames(projectcss.all, sty.svg___1HUu6)}
                  role={"img"}
                />
              </div>
            ) : null}
            <div
              data-plasmic-name={"label5"}
              data-plasmic-override={overrides.label5}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.label5
              )}
            >
              {"Careers"}
            </div>
            {false ? (
              <div
                data-plasmic-name={"arrow244"}
                data-plasmic-override={overrides.arrow244}
                className={classNames(projectcss.all, sty.arrow244)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"icon24Grid4"}
                    data-plasmic-override={overrides.icon24Grid4}
                    className={classNames(projectcss.all, sty.icon24Grid4)}
                  >
                    <div
                      data-plasmic-name={"icons24IconGridSquare4"}
                      data-plasmic-override={overrides.icons24IconGridSquare4}
                      className={classNames(
                        projectcss.all,
                        sty.icons24IconGridSquare4
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__kOzhe)}
                        displayHeight={"20.571428298950195px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"20.571428298950195px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/top_co_website/images/square.svg",
                          fullWidth: 20.571428298950195,
                          fullHeight: 20.571428298950195,
                          aspectRatio: 1
                        }}
                      />
                    </div>
                  </div>
                ) : null}
                <Icon2Icon
                  className={classNames(projectcss.all, sty.svg__vQEg)}
                  role={"img"}
                />
              </div>
            ) : null}
          </Stack__>
          <ContactUsButton
            data-plasmic-name={"contactUsButton"}
            data-plasmic-override={overrides.contactUsButton}
            className={classNames("__wab_instance", sty.contactUsButton)}
          />
        </Stack__>
      </Stack__>
      <div
        data-plasmic-name={"frame2131327275"}
        data-plasmic-override={overrides.frame2131327275}
        className={classNames(projectcss.all, sty.frame2131327275)}
      >
        <div
          data-plasmic-name={"contextMenus"}
          data-plasmic-override={overrides.contextMenus}
          className={classNames(projectcss.all, sty.contextMenus)}
        >
          {false ? (
            <div
              data-plasmic-name={"header2"}
              data-plasmic-override={overrides.header2}
              className={classNames(projectcss.all, sty.header2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u5WnH
                )}
              >
                {"Header"}
              </div>
            </div>
          ) : null}
          <Stack__
            as={"div"}
            data-plasmic-name={"controls"}
            data-plasmic-override={overrides.controls}
            hasGap={true}
            className={classNames(projectcss.all, sty.controls)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g59BE
              )}
            >
              {"Builders Toolkit"}
            </div>
            <div
              data-plasmic-name={"icon"}
              data-plasmic-override={overrides.icon}
              className={classNames(projectcss.all, sty.icon)}
            >
              {false ? (
                <div
                  data-plasmic-name={"icon2"}
                  data-plasmic-override={overrides.icon2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.icon2
                  )}
                >
                  {"\udbc3\udfeb"}
                </div>
              ) : null}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"controls2"}
            data-plasmic-override={overrides.controls2}
            hasGap={true}
            className={classNames(projectcss.all, sty.controls2)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9CEpy
              )}
            >
              {"Companies"}
            </div>
            <div
              data-plasmic-name={"icon3"}
              data-plasmic-override={overrides.icon3}
              className={classNames(projectcss.all, sty.icon3)}
            >
              {false ? (
                <div
                  data-plasmic-name={"icon4"}
                  data-plasmic-override={overrides.icon4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.icon4
                  )}
                >
                  {"\udbc3\udfeb"}
                </div>
              ) : null}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"controls3"}
            data-plasmic-override={overrides.controls3}
            hasGap={true}
            className={classNames(projectcss.all, sty.controls3)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__istuF
              )}
            >
              {"Portfolio"}
            </div>
            <div
              data-plasmic-name={"icon5"}
              data-plasmic-override={overrides.icon5}
              className={classNames(projectcss.all, sty.icon5)}
            >
              {false ? (
                <div
                  data-plasmic-name={"icon6"}
                  data-plasmic-override={overrides.icon6}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.icon6
                  )}
                >
                  {"\udbc3\udfeb"}
                </div>
              ) : null}
            </div>
          </Stack__>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "logoWhite",
    "buttons",
    "buildWithUs",
    "button2",
    "iconFrame2",
    "label2",
    "arrow24",
    "icon24Grid",
    "icons24IconGridSquare",
    "button3",
    "iconFrame3",
    "label3",
    "arrow242",
    "icon24Grid2",
    "icons24IconGridSquare2",
    "button4",
    "iconFrame4",
    "label4",
    "arrow243",
    "icon24Grid3",
    "icons24IconGridSquare3",
    "button5",
    "iconFrame5",
    "label5",
    "arrow244",
    "icon24Grid4",
    "icons24IconGridSquare4",
    "contactUsButton",
    "frame2131327275",
    "contextMenus",
    "header2",
    "controls",
    "icon",
    "icon2",
    "controls2",
    "icon3",
    "icon4",
    "controls3",
    "icon5",
    "icon6"
  ],
  header: [
    "header",
    "logoWhite",
    "buttons",
    "buildWithUs",
    "button2",
    "iconFrame2",
    "label2",
    "arrow24",
    "icon24Grid",
    "icons24IconGridSquare",
    "button3",
    "iconFrame3",
    "label3",
    "arrow242",
    "icon24Grid2",
    "icons24IconGridSquare2",
    "button4",
    "iconFrame4",
    "label4",
    "arrow243",
    "icon24Grid3",
    "icons24IconGridSquare3",
    "button5",
    "iconFrame5",
    "label5",
    "arrow244",
    "icon24Grid4",
    "icons24IconGridSquare4",
    "contactUsButton"
  ],
  logoWhite: ["logoWhite"],
  buttons: [
    "buttons",
    "buildWithUs",
    "button2",
    "iconFrame2",
    "label2",
    "arrow24",
    "icon24Grid",
    "icons24IconGridSquare",
    "button3",
    "iconFrame3",
    "label3",
    "arrow242",
    "icon24Grid2",
    "icons24IconGridSquare2",
    "button4",
    "iconFrame4",
    "label4",
    "arrow243",
    "icon24Grid3",
    "icons24IconGridSquare3",
    "button5",
    "iconFrame5",
    "label5",
    "arrow244",
    "icon24Grid4",
    "icons24IconGridSquare4",
    "contactUsButton"
  ],
  buildWithUs: ["buildWithUs"],
  button2: [
    "button2",
    "iconFrame2",
    "label2",
    "arrow24",
    "icon24Grid",
    "icons24IconGridSquare"
  ],
  iconFrame2: ["iconFrame2"],
  label2: ["label2"],
  arrow24: ["arrow24", "icon24Grid", "icons24IconGridSquare"],
  icon24Grid: ["icon24Grid", "icons24IconGridSquare"],
  icons24IconGridSquare: ["icons24IconGridSquare"],
  button3: [
    "button3",
    "iconFrame3",
    "label3",
    "arrow242",
    "icon24Grid2",
    "icons24IconGridSquare2"
  ],
  iconFrame3: ["iconFrame3"],
  label3: ["label3"],
  arrow242: ["arrow242", "icon24Grid2", "icons24IconGridSquare2"],
  icon24Grid2: ["icon24Grid2", "icons24IconGridSquare2"],
  icons24IconGridSquare2: ["icons24IconGridSquare2"],
  button4: [
    "button4",
    "iconFrame4",
    "label4",
    "arrow243",
    "icon24Grid3",
    "icons24IconGridSquare3"
  ],
  iconFrame4: ["iconFrame4"],
  label4: ["label4"],
  arrow243: ["arrow243", "icon24Grid3", "icons24IconGridSquare3"],
  icon24Grid3: ["icon24Grid3", "icons24IconGridSquare3"],
  icons24IconGridSquare3: ["icons24IconGridSquare3"],
  button5: [
    "button5",
    "iconFrame5",
    "label5",
    "arrow244",
    "icon24Grid4",
    "icons24IconGridSquare4"
  ],
  iconFrame5: ["iconFrame5"],
  label5: ["label5"],
  arrow244: ["arrow244", "icon24Grid4", "icons24IconGridSquare4"],
  icon24Grid4: ["icon24Grid4", "icons24IconGridSquare4"],
  icons24IconGridSquare4: ["icons24IconGridSquare4"],
  contactUsButton: ["contactUsButton"],
  frame2131327275: [
    "frame2131327275",
    "contextMenus",
    "header2",
    "controls",
    "icon",
    "icon2",
    "controls2",
    "icon3",
    "icon4",
    "controls3",
    "icon5",
    "icon6"
  ],
  contextMenus: [
    "contextMenus",
    "header2",
    "controls",
    "icon",
    "icon2",
    "controls2",
    "icon3",
    "icon4",
    "controls3",
    "icon5",
    "icon6"
  ],
  header2: ["header2"],
  controls: ["controls", "icon", "icon2"],
  icon: ["icon", "icon2"],
  icon2: ["icon2"],
  controls2: ["controls2", "icon3", "icon4"],
  icon3: ["icon3", "icon4"],
  icon4: ["icon4"],
  controls3: ["controls3", "icon5", "icon6"],
  icon5: ["icon5", "icon6"],
  icon6: ["icon6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  logoWhite: "div";
  buttons: "div";
  buildWithUs: typeof BuildWithUs;
  button2: "div";
  iconFrame2: "div";
  label2: "div";
  arrow24: "div";
  icon24Grid: "div";
  icons24IconGridSquare: "div";
  button3: "div";
  iconFrame3: "div";
  label3: "div";
  arrow242: "div";
  icon24Grid2: "div";
  icons24IconGridSquare2: "div";
  button4: "div";
  iconFrame4: "div";
  label4: "div";
  arrow243: "div";
  icon24Grid3: "div";
  icons24IconGridSquare3: "div";
  button5: "div";
  iconFrame5: "div";
  label5: "div";
  arrow244: "div";
  icon24Grid4: "div";
  icons24IconGridSquare4: "div";
  contactUsButton: typeof ContactUsButton;
  frame2131327275: "div";
  contextMenus: "div";
  header2: "div";
  controls: "div";
  icon: "div";
  icon2: "div";
  controls2: "div";
  icon3: "div";
  icon4: "div";
  controls3: "div";
  icon5: "div";
  icon6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    logoWhite: makeNodeComponent("logoWhite"),
    buttons: makeNodeComponent("buttons"),
    buildWithUs: makeNodeComponent("buildWithUs"),
    button2: makeNodeComponent("button2"),
    iconFrame2: makeNodeComponent("iconFrame2"),
    label2: makeNodeComponent("label2"),
    arrow24: makeNodeComponent("arrow24"),
    icon24Grid: makeNodeComponent("icon24Grid"),
    icons24IconGridSquare: makeNodeComponent("icons24IconGridSquare"),
    button3: makeNodeComponent("button3"),
    iconFrame3: makeNodeComponent("iconFrame3"),
    label3: makeNodeComponent("label3"),
    arrow242: makeNodeComponent("arrow242"),
    icon24Grid2: makeNodeComponent("icon24Grid2"),
    icons24IconGridSquare2: makeNodeComponent("icons24IconGridSquare2"),
    button4: makeNodeComponent("button4"),
    iconFrame4: makeNodeComponent("iconFrame4"),
    label4: makeNodeComponent("label4"),
    arrow243: makeNodeComponent("arrow243"),
    icon24Grid3: makeNodeComponent("icon24Grid3"),
    icons24IconGridSquare3: makeNodeComponent("icons24IconGridSquare3"),
    button5: makeNodeComponent("button5"),
    iconFrame5: makeNodeComponent("iconFrame5"),
    label5: makeNodeComponent("label5"),
    arrow244: makeNodeComponent("arrow244"),
    icon24Grid4: makeNodeComponent("icon24Grid4"),
    icons24IconGridSquare4: makeNodeComponent("icons24IconGridSquare4"),
    contactUsButton: makeNodeComponent("contactUsButton"),
    frame2131327275: makeNodeComponent("frame2131327275"),
    contextMenus: makeNodeComponent("contextMenus"),
    header2: makeNodeComponent("header2"),
    controls: makeNodeComponent("controls"),
    icon: makeNodeComponent("icon"),
    icon2: makeNodeComponent("icon2"),
    controls2: makeNodeComponent("controls2"),
    icon3: makeNodeComponent("icon3"),
    icon4: makeNodeComponent("icon4"),
    controls3: makeNodeComponent("controls3"),
    icon5: makeNodeComponent("icon5"),
    icon6: makeNodeComponent("icon6"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
