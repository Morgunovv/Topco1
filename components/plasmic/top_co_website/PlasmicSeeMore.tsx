// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tVrjFA7RVCG7zyycB4xXud
// Component: 45nkc3vlT8-m

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tVrjFA7RVCG7zyycB4xXud/projectcss
import sty from "./PlasmicSeeMore.module.css"; // plasmic-import: 45nkc3vlT8-m/css

import Contact24Icon from "./icons/PlasmicIcon__Contact24"; // plasmic-import: 4_F0VNY3gp1U/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: _0LPyGJ07UD3/icon

createPlasmicElementProxy;

export type PlasmicSeeMore__VariantMembers = {};
export type PlasmicSeeMore__VariantsArgs = {};
type VariantPropType = keyof PlasmicSeeMore__VariantsArgs;
export const PlasmicSeeMore__VariantProps = new Array<VariantPropType>();

export type PlasmicSeeMore__ArgsType = {};
type ArgPropType = keyof PlasmicSeeMore__ArgsType;
export const PlasmicSeeMore__ArgProps = new Array<ArgPropType>();

export type PlasmicSeeMore__OverridesType = {
  button14?: Flex__<"div">;
  iconFrame14?: Flex__<"div">;
  label14?: Flex__<"div">;
  arrow2413?: Flex__<"div">;
  icon24Grid13?: Flex__<"div">;
  icons24IconGridSquare13?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultSeeMoreProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSeeMore__RenderFunc(props: {
  variants: PlasmicSeeMore__VariantsArgs;
  args: PlasmicSeeMore__ArgsType;
  overrides: PlasmicSeeMore__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"button14"}
      data-plasmic-override={overrides.button14}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.button14
      )}
    >
      {false ? (
        <div
          data-plasmic-name={"iconFrame14"}
          data-plasmic-override={overrides.iconFrame14}
          className={classNames(projectcss.all, sty.iconFrame14)}
        >
          <Contact24Icon
            className={classNames(projectcss.all, sty.svg__b4Zed)}
            role={"img"}
          />
        </div>
      ) : null}
      <div
        data-plasmic-name={"label14"}
        data-plasmic-override={overrides.label14}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.label14
        )}
      >
        {"See More"}
      </div>
      <div
        data-plasmic-name={"arrow2413"}
        data-plasmic-override={overrides.arrow2413}
        className={classNames(projectcss.all, sty.arrow2413)}
      >
        {false ? (
          <div
            data-plasmic-name={"icon24Grid13"}
            data-plasmic-override={overrides.icon24Grid13}
            className={classNames(projectcss.all, sty.icon24Grid13)}
          >
            <div
              data-plasmic-name={"icons24IconGridSquare13"}
              data-plasmic-override={overrides.icons24IconGridSquare13}
              className={classNames(
                projectcss.all,
                sty.icons24IconGridSquare13
              )}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"20.571428298950195px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"20.571428298950195px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/top_co_website/images/square.svg",
                  fullWidth: 20.571428298950195,
                  fullHeight: 20.571428298950195,
                  aspectRatio: 1
                }}
              />
            </div>
          </div>
        ) : null}
        <Icon2Icon
          className={classNames(projectcss.all, sty.svg__bKfqH)}
          role={"img"}
        />
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  button14: [
    "button14",
    "iconFrame14",
    "label14",
    "arrow2413",
    "icon24Grid13",
    "icons24IconGridSquare13",
    "img"
  ],
  iconFrame14: ["iconFrame14"],
  label14: ["label14"],
  arrow2413: ["arrow2413", "icon24Grid13", "icons24IconGridSquare13", "img"],
  icon24Grid13: ["icon24Grid13", "icons24IconGridSquare13", "img"],
  icons24IconGridSquare13: ["icons24IconGridSquare13", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  button14: "div";
  iconFrame14: "div";
  label14: "div";
  arrow2413: "div";
  icon24Grid13: "div";
  icons24IconGridSquare13: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSeeMore__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSeeMore__VariantsArgs;
    args?: PlasmicSeeMore__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSeeMore__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSeeMore__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSeeMore__ArgProps,
          internalVariantPropNames: PlasmicSeeMore__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSeeMore__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "button14") {
    func.displayName = "PlasmicSeeMore";
  } else {
    func.displayName = `PlasmicSeeMore.${nodeName}`;
  }
  return func;
}

export const PlasmicSeeMore = Object.assign(
  // Top-level PlasmicSeeMore renders the root element
  makeNodeComponent("button14"),
  {
    // Helper components rendering sub-elements
    iconFrame14: makeNodeComponent("iconFrame14"),
    label14: makeNodeComponent("label14"),
    arrow2413: makeNodeComponent("arrow2413"),
    icon24Grid13: makeNodeComponent("icon24Grid13"),
    icons24IconGridSquare13: makeNodeComponent("icons24IconGridSquare13"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicSeeMore
    internalVariantProps: PlasmicSeeMore__VariantProps,
    internalArgProps: PlasmicSeeMore__ArgProps
  }
);

export default PlasmicSeeMore;
/* prettier-ignore-end */
