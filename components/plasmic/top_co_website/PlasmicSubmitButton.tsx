// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tVrjFA7RVCG7zyycB4xXud
// Component: LurICPq3ksiD

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tVrjFA7RVCG7zyycB4xXud/projectcss
import sty from "./PlasmicSubmitButton.module.css"; // plasmic-import: LurICPq3ksiD/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: _0LPyGJ07UD3/icon

createPlasmicElementProxy;

export type PlasmicSubmitButton__VariantMembers = {};
export type PlasmicSubmitButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicSubmitButton__VariantsArgs;
export const PlasmicSubmitButton__VariantProps = new Array<VariantPropType>();

export type PlasmicSubmitButton__ArgsType = {};
type ArgPropType = keyof PlasmicSubmitButton__ArgsType;
export const PlasmicSubmitButton__ArgProps = new Array<ArgPropType>();

export type PlasmicSubmitButton__OverridesType = {
  button15?: Flex__<"div">;
  label15?: Flex__<"div">;
  arrow2414?: Flex__<"div">;
  icon24Grid14?: Flex__<"div">;
  icons24IconGridSquare14?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  svg?: Flex__<"svg">;
};

export interface DefaultSubmitButtonProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSubmitButton__RenderFunc(props: {
  variants: PlasmicSubmitButton__VariantsArgs;
  args: PlasmicSubmitButton__ArgsType;
  overrides: PlasmicSubmitButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"button15"}
      data-plasmic-override={overrides.button15}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.button15
      )}
    >
      <div
        data-plasmic-name={"label15"}
        data-plasmic-override={overrides.label15}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.label15
        )}
      >
        {"Send Application "}
      </div>
      {false ? (
        <div
          data-plasmic-name={"arrow2414"}
          data-plasmic-override={overrides.arrow2414}
          className={classNames(projectcss.all, sty.arrow2414)}
        >
          {false ? (
            <div
              data-plasmic-name={"icon24Grid14"}
              data-plasmic-override={overrides.icon24Grid14}
              className={classNames(projectcss.all, sty.icon24Grid14)}
            >
              <div
                data-plasmic-name={"icons24IconGridSquare14"}
                data-plasmic-override={overrides.icons24IconGridSquare14}
                className={classNames(
                  projectcss.all,
                  sty.icons24IconGridSquare14
                )}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"20.571428298950195px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"20.571428298950195px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/top_co_website/images/square.svg",
                    fullWidth: 20.571428298950195,
                    fullHeight: 20.571428298950195,
                    aspectRatio: 1
                  }}
                />
              </div>
            </div>
          ) : null}
          <Icon2Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  button15: [
    "button15",
    "label15",
    "arrow2414",
    "icon24Grid14",
    "icons24IconGridSquare14",
    "img",
    "svg"
  ],
  label15: ["label15"],
  arrow2414: [
    "arrow2414",
    "icon24Grid14",
    "icons24IconGridSquare14",
    "img",
    "svg"
  ],
  icon24Grid14: ["icon24Grid14", "icons24IconGridSquare14", "img"],
  icons24IconGridSquare14: ["icons24IconGridSquare14", "img"],
  img: ["img"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  button15: "div";
  label15: "div";
  arrow2414: "div";
  icon24Grid14: "div";
  icons24IconGridSquare14: "div";
  img: typeof PlasmicImg__;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubmitButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSubmitButton__VariantsArgs;
    args?: PlasmicSubmitButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSubmitButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSubmitButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSubmitButton__ArgProps,
          internalVariantPropNames: PlasmicSubmitButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSubmitButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "button15") {
    func.displayName = "PlasmicSubmitButton";
  } else {
    func.displayName = `PlasmicSubmitButton.${nodeName}`;
  }
  return func;
}

export const PlasmicSubmitButton = Object.assign(
  // Top-level PlasmicSubmitButton renders the root element
  makeNodeComponent("button15"),
  {
    // Helper components rendering sub-elements
    label15: makeNodeComponent("label15"),
    arrow2414: makeNodeComponent("arrow2414"),
    icon24Grid14: makeNodeComponent("icon24Grid14"),
    icons24IconGridSquare14: makeNodeComponent("icons24IconGridSquare14"),
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicSubmitButton
    internalVariantProps: PlasmicSubmitButton__VariantProps,
    internalArgProps: PlasmicSubmitButton__ArgProps
  }
);

export default PlasmicSubmitButton;
/* prettier-ignore-end */
