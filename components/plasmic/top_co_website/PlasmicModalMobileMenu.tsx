// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tVrjFA7RVCG7zyycB4xXud
// Component: siKgXh_j7OMH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { BaseDialogTrigger } from "@plasmicpkgs/react-aria/skinny/registerDialogTrigger";
import { BaseModal } from "@plasmicpkgs/react-aria/skinny/registerModal";
import { BaseDialog } from "@plasmicpkgs/react-aria/skinny/registerDialog";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tVrjFA7RVCG7zyycB4xXud/projectcss
import sty from "./PlasmicModalMobileMenu.module.css"; // plasmic-import: siKgXh_j7OMH/css

import Frame2131327153Icon from "./icons/PlasmicIcon__Frame2131327153"; // plasmic-import: i9h3lVHw5uRy/icon
import Chevron243Icon from "./icons/PlasmicIcon__Chevron243"; // plasmic-import: 8aTfnpHQ1sUB/icon

createPlasmicElementProxy;

export type PlasmicModalMobileMenu__VariantMembers = {
  noTrigger: "noTrigger";
};
export type PlasmicModalMobileMenu__VariantsArgs = {
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
};
type VariantPropType = keyof PlasmicModalMobileMenu__VariantsArgs;
export const PlasmicModalMobileMenu__VariantProps = new Array<VariantPropType>(
  "noTrigger"
);

export type PlasmicModalMobileMenu__ArgsType = {
  isOpen?: boolean;
  closeOnBackdropClick?: boolean;
  showHeader?: boolean;
  showFooter?: boolean;
  isKeyboardDismissDisabled?: boolean;
  onOpenChange?: (val: boolean) => void;
  trigger?: React.ReactNode;
  content?: React.ReactNode;
};
type ArgPropType = keyof PlasmicModalMobileMenu__ArgsType;
export const PlasmicModalMobileMenu__ArgProps = new Array<ArgPropType>(
  "isOpen",
  "closeOnBackdropClick",
  "showHeader",
  "showFooter",
  "isKeyboardDismissDisabled",
  "onOpenChange",
  "trigger",
  "content"
);

export type PlasmicModalMobileMenu__OverridesType = {
  ariaDialogTrigger?: Flex__<typeof BaseDialogTrigger>;
  ariaModal?: Flex__<typeof BaseModal>;
  ariaDialog?: Flex__<typeof BaseDialog>;
  scrollableContent?: Flex__<"div">;
};

export interface DefaultModalMobileMenuProps {
  isOpen?: boolean;
  closeOnBackdropClick?: boolean;
  showHeader?: boolean;
  showFooter?: boolean;
  isKeyboardDismissDisabled?: boolean;
  onOpenChange?: (val: boolean) => void;
  trigger?: React.ReactNode;
  content?: React.ReactNode;
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicModalMobileMenu__RenderFunc(props: {
  variants: PlasmicModalMobileMenu__VariantsArgs;
  args: PlasmicModalMobileMenu__ArgsType;
  overrides: PlasmicModalMobileMenu__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          closeOnBackdropClick: true,
          showHeader: true,
          showFooter: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "ariaDialogTrigger.isOpen",
        type: "writable",
        variableType: "boolean",

        valueProp: "isOpen",
        onChangeProp: "onOpenChange"
      },
      {
        path: "ariaModal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true,

        refName: "ariaModal"
      },
      {
        path: "noTrigger",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noTrigger
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <BaseDialogTrigger
      data-plasmic-name={"ariaDialogTrigger"}
      data-plasmic-override={overrides.ariaDialogTrigger}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.ariaDialogTrigger,
        {
          [sty.ariaDialogTriggernoTrigger]: hasVariant(
            $state,
            "noTrigger",
            "noTrigger"
          )
        }
      )}
      dialog={
        <BaseModal
          data-plasmic-name={"ariaModal"}
          data-plasmic-override={overrides.ariaModal}
          className={classNames("__wab_instance", sty.ariaModal, {
            [sty.ariaModalnoTrigger]: hasVariant(
              $state,
              "noTrigger",
              "noTrigger"
            )
          })}
          defaultOpen={true}
          isDismissable={args.closeOnBackdropClick}
          isKeyboardDismissDisabled={args.isKeyboardDismissDisabled}
          isOpen={generateStateValueProp($state, ["ariaModal", "isOpen"])}
          modalOverlayClass={classNames({ [sty["pcls_yLvzaU_iAn0v"]]: true })}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["ariaModal", "isOpen"]).apply(
              null,
              eventArgs
            );
          }}
          ref={ref => {
            $refs["ariaModal"] = ref;
          }}
          resetClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens
          )}
        >
          <BaseDialog
            data-plasmic-name={"ariaDialog"}
            data-plasmic-override={overrides.ariaDialog}
            className={classNames("__wab_instance", sty.ariaDialog, {
              [sty.ariaDialognoTrigger]: hasVariant(
                $state,
                "noTrigger",
                "noTrigger"
              )
            })}
          >
            <div
              data-plasmic-name={"scrollableContent"}
              data-plasmic-override={overrides.scrollableContent}
              className={classNames(projectcss.all, sty.scrollableContent)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__bmmYg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1UqTu
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kdKj7
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uxjZ2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__reAMx
                            )}
                          >
                            {"Build With Us"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jygAa
                            )}
                          >
                            <Chevron243Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__n3AJp
                              )}
                              role={"img"}
                            />
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cYoQi
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__y9Rgs
                            )}
                          >
                            {"Investments"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pZhxt
                            )}
                          />
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jW6EX
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yaEyo
                            )}
                          >
                            {"Insights"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__e3K28
                            )}
                          />
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hkE6Q
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__z4V9
                            )}
                          >
                            {"About TOP"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uCh2T
                            )}
                          />
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dsBrY
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zjTd3
                            )}
                          >
                            {"Carrers"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__roaOj
                            )}
                          />
                        </Stack__>
                      </div>
                    </div>
                  </Stack__>
                ),
                value: args.content
              })}
            </div>
          </BaseDialog>
        </BaseModal>
      }
      isOpen={generateStateValueProp($state, ["ariaDialogTrigger", "isOpen"])}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, [
          "ariaDialogTrigger",
          "isOpen"
        ]).apply(null, eventArgs);
      }}
      trigger={
        (hasVariant($state, "noTrigger", "noTrigger") ? false : true)
          ? renderPlasmicSlot({
              defaultContents: (
                <div className={classNames(projectcss.all, sty.freeBox__iAw4P)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cM5W3)}
                  >
                    <Stack__
                      as={Frame2131327153Icon}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.svg__lNm99)}
                      role={"img"}
                    />
                  </div>
                </div>
              ),
              value: args.trigger
            })
          : null
      }
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  ariaDialogTrigger: [
    "ariaDialogTrigger",
    "ariaModal",
    "ariaDialog",
    "scrollableContent"
  ],
  ariaModal: ["ariaModal", "ariaDialog", "scrollableContent"],
  ariaDialog: ["ariaDialog", "scrollableContent"],
  scrollableContent: ["scrollableContent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  ariaDialogTrigger: typeof BaseDialogTrigger;
  ariaModal: typeof BaseModal;
  ariaDialog: typeof BaseDialog;
  scrollableContent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicModalMobileMenu__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicModalMobileMenu__VariantsArgs;
    args?: PlasmicModalMobileMenu__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicModalMobileMenu__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicModalMobileMenu__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicModalMobileMenu__ArgProps,
          internalVariantPropNames: PlasmicModalMobileMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicModalMobileMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ariaDialogTrigger") {
    func.displayName = "PlasmicModalMobileMenu";
  } else {
    func.displayName = `PlasmicModalMobileMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicModalMobileMenu = Object.assign(
  // Top-level PlasmicModalMobileMenu renders the root element
  makeNodeComponent("ariaDialogTrigger"),
  {
    // Helper components rendering sub-elements
    ariaModal: makeNodeComponent("ariaModal"),
    ariaDialog: makeNodeComponent("ariaDialog"),
    scrollableContent: makeNodeComponent("scrollableContent"),

    // Metadata about props expected for PlasmicModalMobileMenu
    internalVariantProps: PlasmicModalMobileMenu__VariantProps,
    internalArgProps: PlasmicModalMobileMenu__ArgProps
  }
);

export default PlasmicModalMobileMenu;
/* prettier-ignore-end */
